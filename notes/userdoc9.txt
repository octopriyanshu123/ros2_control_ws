:github_url: https://github.com/ros-controls/ros2_control_demos/blob/{REPOS_FILE_BRANCH}/example_9/doc/userdoc.rst

.. _ros2_control_demos_example_9_userdoc:

Example 9: Simulation with RRBot
=================================

With *example_9*, we demonstrate the interaction of simulators with ros2_control. More specifically,
Gazebo Classic is used for this purpose.

.. note::

  Follow the installation instructions on :ref:`ros2_control_demos_install` how to install all dependencies,
  Gazebo Classic should be automatically installed.

  * If you have installed and compiled this repository locally, you can directly use the commands below.
  * If you have installed it via the provided docker image: To run the first two steps of this example (without Gazebo Classic), use the commands as described with :ref:`ros2_control_demos_install`. To run the later steps using Gazebo Classic, execute

    .. code::

      docker run -it --rm --name ros2_control_demos --net host ros2_control_demos ros2 launch ros2_control_demo_example_9 rrbot_gazebo_classic.launch.py gui:=false

    first. Then on your local machine you can run the Gazebo Classic client with

    .. code-block:: shell

      gzclient

    and/or ``rviz2`` with

    .. code-block:: shell

      rviz2 -d src/ros2_control_demos/example_9/description/rviz/rrbot.rviz


  For details on the ``gazebo_ros2_control`` plugin, see :ref:`gazebo_ros2_control`.

Tutorial steps
--------------------------

1. To check that *RRBot* descriptions are working properly use following launch commands

   .. code-block:: shell

    ros2 launch ros2_control_demo_example_9 view_robot.launch.py

   The ``joint_state_publisher_gui`` provides a GUI to change the configuration for *RRbot*. It is immediately displayed in *RViz*.


2. To start *RRBot* with the hardware interface instead of the simulators, open a terminal, source your ROS2-workspace and execute its launch file with

   .. code-block:: shell

    ros2 launch ros2_control_demo_example_9 rrbot.launch.py

   It uses an identical hardware interface as already discussed with *example_1*, see its docs on details on the hardware interface.

3. To start *RRBot* in the simulators, open a terminal, source your ROS2-workspace and Gazebo Classic installation first, i.e., by

  .. code-block:: shell

    source /usr/share/gazebo/setup.sh

  Then, execute the launch file with

  .. code-block:: shell

    ros2 launch ros2_control_demo_example_9 rrbot_gazebo_classic.launch.py gui:=true

  The launch file loads the robot description, starts Gazebo Classic, *Joint State Broadcaster* and *Forward Command Controller*.
  If you can see two orange and one yellow "box" in Gazebo Classic everything has started properly.

  .. image:: rrbot_gazebo_classic.png
    :width: 400
    :alt: Revolute-Revolute Manipulator Robot in Gazebo Classic

4. Check if the hardware interface loaded properly, by opening another terminal and executing

   .. code-block:: shell

    ros2 control list_hardware_interfaces

   .. code-block:: shell

    command interfaces
          joint1/position [available] [claimed]
          joint2/position [available] [claimed]
    state interfaces
          joint1/position
          joint2/position

   Marker ``[claimed]`` by command interfaces means that a controller has access to command *RRBot*.

5. Check if controllers are running by

   .. code-block:: shell

    ros2 control list_controllers

   .. code-block:: shell

    joint_state_broadcaster[joint_state_broadcaster/JointStateBroadcaster] active
    forward_position_controller[forward_command_controller/ForwardCommandController] active

6. If you get output from above you can send commands to *Forward Command Controller*, either:

   a. Manually using ROS 2 CLI interface:

   .. code-block:: shell

    ros2 topic pub /forward_position_controller/commands std_msgs/msg/Float64MultiArray "data:
    - 0.5
    - 0.5"

   B. Or you can start a demo node which sends two goals every 5 seconds in a loop

   .. code-block:: shell

    ros2 launch ros2_control_demo_example_9 test_forward_position_controller.launch.py

   You should now see the robot moving in Gazebo Classic.

   If you echo the ``/joint_states`` or ``/dynamic_joint_states`` topics you should see the changing values,
   namely the simulated states of the robot

   .. code-block:: shell

    ros2 topic echo /joint_states
    ros2 topic echo /dynamic_joint_states


Files used for this demos
-------------------------

- Launch files:

  + Hardware: `rrbot.launch.py <https://github.com/ros-controls/ros2_control_demos/tree/{REPOS_FILE_BRANCH}/example_9/bringup/launch/rrbot.launch.py>`__
  + Gazebo Classic: `rrbot_gazebo_classic.launch.py <https://github.com/ros-controls/ros2_control_demos/tree/{REPOS_FILE_BRANCH}/example_9/bringup/launch/rrbot_gazebo_classic.launch.py>`__

- Controllers yaml: `rrbot_controllers.yaml <https://github.com/ros-controls/ros2_control_demos/tree/{REPOS_FILE_BRANCH}/example_9/bringup/config/rrbot_controllers.yaml>`__
- URDF file: `rrbot.urdf.xacro <https://github.com/ros-controls/ros2_control_demos/tree/{REPOS_FILE_BRANCH}/example_9/description/urdf/rrbot.urdf.xacro>`__

  + Description: `rrbot_description.urdf.xacro <https://github.com/ros-controls/ros2_control_demos/tree/{REPOS_FILE_BRANCH}/ros2_control_demo_description/rrbot/urdf/rrbot_description.urdf.xacro>`__
  + ``ros2_control`` tag: `rrbot.ros2_control.xacro <https://github.com/ros-controls/ros2_control_demos/tree/{REPOS_FILE_BRANCH}/example_9/description/ros2_control/rrbot.ros2_control.xacro>`__

- RViz configuration: `rrbot.rviz <https://github.com/ros-controls/ros2_control_demos/tree/{REPOS_FILE_BRANCH}/ros2_control_demo_description/rrbot/rviz/rrbot.rviz>`__
- Test nodes goals configuration:

  + `rrbot_forward_position_publisher <https://github.com/ros-controls/ros2_control_demos/tree/{REPOS_FILE_BRANCH}/example_9/bringup/config/rrbot_forward_position_publisher.yaml>`__

- Hardware interface plugin: `rrbot.cpp <https://github.com/ros-controls/ros2_control_demos/tree/{REPOS_FILE_BRANCH}/example_9/hardware/rrbot.cpp>`__


Controllers from this demo
--------------------------
- ``Joint State Broadcaster`` (`ros2_controllers repository <https://github.com/ros-controls/ros2_controllers/tree/{REPOS_FILE_BRANCH}/joint_state_broadcaster>`__): :ref:`doc <joint_state_broadcaster_userdoc>`
- ``Forward Command Controller`` (`ros2_controllers repository <https://github.com/ros-controls/ros2_controllers/tree/{REPOS_FILE_BRANCH}/forward_command_controller>`__): :ref:`doc <forward_command_controller_userdoc>`

cmake_minimum_required(VERSION 3.10)

project(SunAndCircle)

find_package(OpenGL REQUIRED)  # Find OpenGL package
find_package(GLUT REQUIRED)    # Find GLUT (if you are using GLUT for window/context management)

add_executable(SunAndCircle src/main.cpp)

# Link against OpenGL and GLU (GLU is required for gluPerspective)
target_link_libraries(SunAndCircle OpenGL::OpenGL GLUT::GLUT)



#include <GL/glut.h>
#include <cmath>
#include <utility>

#define window_width  800
#define window_height 800
float length_line = 0.5f;
float radius = 0.03f;
float origin[] = {0.0f, 0.0f};
float pi = 3.1415926f;
float angle = pi / 2;
float angular_velocity = 0.00;
float angular_acc  = 0.00;
float gravity  = 0.00010193679918451;
// float air_drag = 0.99999;
void GL_Setup(int width, int height) {
    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-1, 1, -1, 1, -1, 1);
    glMatrixMode(GL_MODELVIEW);
}

struct Circle {
    float x, y, radius;
    Circle(float x_val, float y_val, float r) : x(x_val), y(y_val), radius(r) {}

    void drawFilledCircle(int num_segments) const {
        glBegin(GL_TRIANGLE_FAN);
        glVertex2f(x, y);
        for (int ii = 0; ii <= num_segments; ii++) {
            float theta = 2.0f * 3.1415926f * float(ii) / float(num_segments);
            float dx = radius * cosf(theta);
            float dy = radius * sinf(theta);
            glVertex2f(dx + x, dy + y);
        }
        glEnd();
    }
};

void drawLine(float x1, float y1, float x2, float y2) {
    glBegin(GL_LINES);
    glVertex2f(x1, y1);
    glVertex2f(x2, y2);
    glEnd();
}

std::pair<float, float> update_frame() {
    float florce = gravity*sin(angle);
    angular_acc = florce;
    angular_velocity += angular_acc;
    // angular_velocity -= air_drag;
    angle += angular_velocity;
    float newx = sin(angle) * length_line;
    float newy = cos(angle) * length_line;
    return std::make_pair(newx, newy);
}

void main_loop_function() {
    glClear(GL_COLOR_BUFFER_BIT);

    glColor3f(1.0f, 0.0f, 0.0f);

    Circle c1(0.0f, 0.0f, radius);
    Circle c2(0.0f, 0.0f, radius);

    std::pair<float, float> new_position = update_frame();
    c1.x = new_position.first;
    c1.y = new_position.second;

    std::pair<float, float> new_position2 = update_frame();
    c2.x = new_position2.first;
    c2.y = new_position2.second;

    c1.drawFilledCircle(1000);
    c2.drawFilledCircle(1000);

    glColor3f(0.0f, 1.0f, 0.0f);

    drawLine(origin[0], origin[1], c1.x, c1.y);
    drawLine(c1.x, c1.y, c2.x, c2.y);

    glutSwapBuffers();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitWindowSize(window_width, window_height);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
    glutCreateWindow("Filled Circle and Line Rendering");
    glutIdleFunc(main_loop_function);
    GL_Setup(window_width, window_height);
    glutMainLoop();
}

